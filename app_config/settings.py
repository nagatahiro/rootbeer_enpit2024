"""
Django settings for app_config project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from google.cloud import storage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7+_vo%2fis!0r!%91lgll+a)hengbi6*lg0v-(-fa1l8fd+jq5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app_folder.apps.AppFolderConfig',
    'bootstrap4', #デザイン用
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# メディアファイルに関する設定
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOGIN_URL = "app_folder:login"      ### 追加
LOGIN_REDIRECT_URL = "app_folder:home"      ### 追加
LOGOUT_REDIRECT_URL = "app_folder:top"      ### 追加

## os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "/Users/ooishikonryouma/Downloads/key.json" ##＃追加

def download_api_key_from_gcs(bucket_name, source_blob_name, destination_file_name):
    """
    GCSバケットからAPIキーをダウンロードする。
    
    Args:
        bucket_name (str): GCSバケット名
        source_blob_name (str): GCS内のファイルパス
        destination_file_name (str): ローカルに保存するパス
    """
    client = storage.Client()
    bucket = client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    blob.download_to_filename(destination_file_name)
    print(f"Downloaded {source_blob_name} to {destination_file_name}.")

GCS_BUCKET_NAME = "cloud_vision_api-key"
GCS_API_KEY_PATH = "ocr-key.json"
LOCAL_API_KEY_PATH = os.path.join(BASE_DIR, "ocr-key.json")

# GCSからAPIキーを取得して環境変数に設定する関数を追加
def set_api_key_from_gcs(bucket_name, source_blob_name):
    """
    GCSバケットからAPIキーを取得し、環境変数に設定する。
    
    Args:
        bucket_name (str): GCSバケット名
        source_blob_name (str): GCS内のファイルパス
    """
    client = storage.Client()
    bucket = client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    
    # 一時ファイルにダウンロード
    with open("/tmp/ocr-key.json", "wb") as temp_file:
        blob.download_to_file(temp_file)
    
    # 環境変数に設定
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/tmp/ocr-key.json"

# GCSからAPIキーを取得して環境変数に設定
set_api_key_from_gcs(GCS_BUCKET_NAME, GCS_API_KEY_PATH)

